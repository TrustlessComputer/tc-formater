{"version":3,"file":"tc-formatter-package.js","sources":["../../src/lib/amount/separator.ts","../../src/lib/amount/format.ts","../../src/lib/amount/convert.ts","../../src/lib/address/format.ts"],"sourcesContent":["const decimalSeparator = '.';\nconst groupSeparator = ',';\n\nfunction getDecimalSeparator() {\n  return decimalSeparator;\n}\n\nfunction getGroupSeparator() {\n  return groupSeparator;\n}\n\nexport { getDecimalSeparator, getGroupSeparator };\n","import { BigNumber } from 'bignumber.js';\nimport { getDecimalSeparator, getGroupSeparator } from '@/lib/amount/separator';\nimport { toHumanAmount } from '@/lib/amount/convert';\nimport { IAmount, IMaxDigits, IShorterAmount, IToFixed } from '@/types/amount';\n\nconst removeTrailingZeroes = ({ amountString }: { amountString: string }) => {\n  let formattedString = amountString;\n  const decimalSeparator = getDecimalSeparator();\n  while (\n    formattedString.length > 0 &&\n    ((formattedString.includes(decimalSeparator) &&\n      formattedString[formattedString.length - 1] === '0') ||\n      formattedString[formattedString.length - 1] === decimalSeparator)\n  ) {\n    formattedString = formattedString.slice(0, formattedString.length - 1);\n  }\n\n  return formattedString;\n};\n\nconst getMaxDecimalDigits = (payload: IMaxDigits) => {\n  const { decimals, decimalDigits, clipAmount, humanAmount } = payload;\n  let maxDigits = decimals;\n  try {\n    if (clipAmount) {\n      if (humanAmount > 0 && humanAmount < 1 && decimalDigits) {\n        maxDigits = 5;\n      }\n      if (humanAmount > 1) {\n        maxDigits = 4;\n      }\n      if (humanAmount > 1e3) {\n        maxDigits = 2;\n      }\n      if (humanAmount > 1e5) {\n        maxDigits = 0;\n      }\n    }\n  } catch (error) {\n    maxDigits = decimals;\n    throw error;\n  }\n  return maxDigits;\n};\n\nconst toFixed = (payload: IToFixed) => {\n  const decimalSeparator = getDecimalSeparator();\n  const { number, decimals } = payload;\n  const bigNumber = new BigNumber(number);\n  if (bigNumber.isNaN()) {\n    return '0';\n  }\n  return removeTrailingZeroes({\n    amountString: bigNumber.toFixed(decimals).replace('.', decimalSeparator),\n  });\n};\n\nconst formatAmount = (payload: IAmount) => {\n  const {\n    originalAmount,\n    humanAmount,\n    decimals,\n    clipAmount = true,\n    decimalDigits = true,\n    maxDigits,\n    isCeil = false,\n  } = payload;\n  const decimalSeparator = getDecimalSeparator();\n  const groupSeparator = getGroupSeparator();\n  const fmt = {\n    decimalSeparator,\n    groupSeparator,\n    groupSize: 3,\n  };\n  let formatedAmount;\n  try {\n    const convertHumanAmount =\n      humanAmount ||\n      toHumanAmount({\n        originalAmount,\n        decimals,\n      });\n    const _maxDigits = maxDigits\n      ? maxDigits\n      : getMaxDecimalDigits({\n          clipAmount,\n          decimalDigits,\n          decimals,\n          humanAmount: convertHumanAmount,\n        });\n    let fixedNumber;\n    if (decimals) {\n      fixedNumber = new BigNumber(convertHumanAmount).toFormat(\n        Math.min(decimals, _maxDigits),\n        isCeil ? BigNumber.ROUND_CEIL : BigNumber.ROUND_FLOOR\n      );\n    } else {\n      fixedNumber = new BigNumber(convertHumanAmount).toFormat(\n        _maxDigits,\n        isCeil ? BigNumber.ROUND_CEIL : BigNumber.ROUND_FLOOR\n      );\n    }\n    const fixedString = toFixed({\n      number: fixedNumber,\n      decimals,\n    });\n    const amountString = new BigNumber(fixedString).toFormat(\n      _maxDigits,\n      isCeil ? BigNumber.ROUND_CEIL : BigNumber.ROUND_DOWN,\n      fmt\n    );\n    formatedAmount = removeTrailingZeroes({\n      amountString,\n    });\n  } catch (error) {\n    formatedAmount = '0';\n    throw error;\n  }\n  return formatedAmount;\n};\n\nconst number = (num: number) => {\n  const fmt = {\n    decimalSeparator: getDecimalSeparator(),\n    groupSeparator: getGroupSeparator(),\n    groupSize: 3,\n  };\n  const rs = new BigNumber(num);\n  return rs.isFinite() ? rs.toFormat(fmt) : num;\n};\n\nconst getDecimalsFromHumanAmount = (\n  humanAmount: number,\n  defaultDecimals: number\n) => {\n  let decimals;\n  if (humanAmount > 10) {\n    decimals = 2;\n  } else if (humanAmount > 1) {\n    decimals = 3;\n  } else if (humanAmount > 1e-4) {\n    // 0.0001\n    decimals = 4;\n  } else if (humanAmount > 1e-5) {\n    // 0.00001\n    decimals = 5;\n  } else {\n    decimals = Math.max(defaultDecimals, 6);\n  }\n  return decimals;\n};\n\nconst shorterAmount = ({\n  originalAmount,\n  decimals,\n}: IShorterAmount): string => {\n  try {\n    const _amount = toHumanAmount({ originalAmount, decimals });\n    const _decimals = getDecimalsFromHumanAmount(_amount, decimals);\n    return _amount\n      ? removeTrailingZeroes({\n          amountString: new BigNumber(_amount).toFormat(\n            _decimals,\n            BigNumber.ROUND_DOWN\n          ),\n        }).toString()\n      : '0';\n  } catch (e) {\n    return '0';\n  }\n};\n\nexport { formatAmount, number, toFixed, shorterAmount };\n","import { IHumanAmount, IReplaceDecimals } from '@/types/amount';\nimport { getDecimalSeparator } from '@/lib/amount/separator';\nimport { BigNumber } from 'bignumber.js';\nimport { toFixed } from '@/lib/amount/format';\n\nconst checkAmount = (amount: number) => {\n  if (!Number.isFinite(amount))\n    throw new Error('Can not format invalid amount');\n};\n\nconst replaceDecimals = ({ text, autoCorrect = false }: IReplaceDecimals) => {\n  let result = text;\n  const decimalSeparator = getDecimalSeparator();\n  if (\n    decimalSeparator === ',' &&\n    !result?.includes?.('e+') &&\n    !result?.includes?.('e-')\n  ) {\n    result = result.replace(/\\./g, '_');\n    result = result.replace(/,/g, '.');\n    result = result.replace(/_/g, ',');\n  }\n  if (autoCorrect) {\n    result = result.replace(/,/g, '');\n  }\n  return result;\n};\n\nconst toHumanAmount = (payload: IHumanAmount) => {\n  const { originalAmount = 0, decimals } = payload;\n  const amount = new BigNumber(originalAmount);\n  if (amount.isNaN()) {\n    return 0;\n  }\n  const indexNumber = new BigNumber(10).pow(decimals);\n  return amount.dividedBy(indexNumber).toNumber();\n};\n\nconst toHumanAmountString = (payload: IHumanAmount) => {\n  return toFixed({\n    number: toHumanAmount({\n      originalAmount: payload.originalAmount || 0,\n      decimals: payload.decimals,\n    }),\n    decimals: payload.decimals,\n  });\n};\n\nconst toOriginalAmount = ({\n  humanAmount,\n  decimals,\n  round = true,\n}: {\n  humanAmount: string;\n  decimals: number;\n  round?: boolean;\n}) => {\n  let amount = 0;\n  try {\n    const amountRepDecimals = replaceDecimals({\n      text: humanAmount,\n    });\n    const bnAmount = new BigNumber(amountRepDecimals);\n    if (bnAmount.isNaN()) {\n      return 0;\n    }\n    const indexNumber = new BigNumber(10).pow(decimals || 0).toNumber();\n    amount = bnAmount.multipliedBy(new BigNumber(indexNumber)).toNumber();\n    if (round) {\n      amount = Math.floor(amount);\n    }\n  } catch (error) {\n    amount = 0;\n    throw error;\n  }\n  return amount;\n};\n\nconst toNumber = ({\n  text,\n  autoCorrect = true,\n}: {\n  text: string;\n  autoCorrect?: boolean;\n}) => {\n  const number = replaceDecimals({\n    text,\n    autoCorrect,\n  });\n  return new BigNumber(number).toNumber();\n};\n\nconst toString = ({\n  text,\n  autoCorrect = true,\n}: {\n  text: string;\n  autoCorrect?: boolean;\n}) => {\n  const number = replaceDecimals({\n    text,\n    autoCorrect,\n  });\n  return new BigNumber(number).toString();\n};\n\nexport {\n  checkAmount,\n  replaceDecimals,\n  toHumanAmount,\n  toHumanAmountString,\n  toOriginalAmount,\n  toNumber,\n  toString,\n};\n","import { IEllipsisCenter, IStartAddress } from '@/types/address';\n\nconst ellipsisCenter = (payload: IEllipsisCenter) => {\n  const { str, limit = 6, start = 0, end = 0, dots = '...' } = payload;\n  try {\n    const size = str.length;\n    if (size < (start && end ? start + end : limit * 2) + dots.length) {\n      return str;\n    }\n\n    const leftStr = str.substring(0, start || limit);\n    const rightStr = str.substring(size - (end || limit), size);\n    return leftStr + dots + rightStr;\n  } catch {\n    return str;\n  }\n};\n\nconst startAddress = ({ address, length = 10 }: IStartAddress): string => {\n  if (!address) return '';\n  if (address.length < 14) return address;\n  return `${address.substring(0, length)}`;\n};\n\nexport { ellipsisCenter, startAddress };\n"],"names":["BigNumber"],"mappings":"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"}